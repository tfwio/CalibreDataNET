/* oio * 7/25/2014 * Time: 7:23 PM
 */
using System;
using System.Data;
using System.Data.SQLite;

namespace CalibreData.Models
{
	
	// Generated by a tool : 07/27/2014 06:25:37.368 PM
	// ------------------------
	public partial class Books
	{
		static public implicit operator Books(DataRowView row) { return Books.FromRowView(row); }
		// a custom variable
//		public string SQLiteDataPath
//		{
//			get;
//			internal set;
//		}
		static public string StringForBooks(string input, Books m)
		{
			return input
				.Replace("{id}", string.Format("{0}",m.id))
				.Replace("{title}", string.Format("{0}",m.title))
				.Replace("{sort}", string.Format("{0}",m.sort))
				.Replace("{timestamp}", string.Format("{0}",m.timestamp))
				.Replace("{pubdate}", string.Format("{0}",m.pubdate))
				.Replace("{series_index}", string.Format("{0}",m.series_index))
				.Replace("{author_sort}", string.Format("{0}",m.author_sort))
				.Replace("{isbn}", string.Format("{0}",m.isbn))
				.Replace("{lccn}", string.Format("{0}",m.lccn))
				.Replace("{path}", string.Format("{0}",m.path))
				.Replace("{flags}", string.Format("{0}",m.flags))
				.Replace("{uuid}", string.Format("{0}",m.uuid))
				.Replace("{has_cover}", string.Format("{0}",m.has_cover))
				.Replace("{last_modified}", string.Format("{0}",m.last_modified));
		}

		static public string StringForBooks(string input, DataRowView row)
		{
			return input
				.Replace("{id}", string.Format("{0}",row["id"]))
				.Replace("{title}", string.Format("{0}",row["title"]))
				.Replace("{sort}", string.Format("{0}",row["sort"]))
				.Replace("{timestamp}", string.Format("{0}",row["timestamp"]))
				.Replace("{pubdate}", string.Format("{0}",row["pubdate"]))
				.Replace("{series_index}", string.Format("{0}",row["series_index"]))
				.Replace("{author_sort}", string.Format("{0}",row["author_sort"]))
				.Replace("{isbn}", string.Format("{0}",row["isbn"]))
				.Replace("{lccn}", string.Format("{0}",row["lccn"]))
				.Replace("{path}", string.Format("{0}",row["path"]))
				.Replace("{flags}", string.Format("{0}",row["flags"]))
				.Replace("{uuid}", string.Format("{0}",row["uuid"]))
				.Replace("{has_cover}", string.Format("{0}",row["has_cover"]))
				.Replace("{last_modified}", string.Format("{0}",row["last_modified"]));
		}

		#region Queries
		/// <summary> not that we need it or anything </summary>
		internal const string Insert_Books = @"INSERT INTO [books] (
	[title],
	[sort],
	[timestamp],
	[pubdate],
	[series_index],
	[author_sort],
	[isbn],
	[lccn],
	[path],
	[flags],
	[uuid],
	[has_cover],
	[last_modified])
VALUES(
	@title,
	@sort,
	@timestamp,
	@pubdate,
	@series_index,
	@author_sort,
	@isbn,
	@lccn,
	@path,
	@flags,
	@uuid,
	@has_cover,
	@last_modified);";
		/// <summary> not that we need it or anything </summary>
		internal const string Update_Books = @"UPDATE [books] SET 
		[title] = @title,
		[sort] = @sort,
		[timestamp] = @timestamp,
		[pubdate] = @pubdate,
		[series_index] = @series_index,
		[author_sort] = @author_sort,
		[isbn] = @isbn,
		[lccn] = @lccn,
		[path] = @path,
		[flags] = @flags,
		[uuid] = @uuid,
		[has_cover] = @has_cover,
		[last_modified] = @last_modified
WHERE [id] = @xid;";
		/// <summary> not that we need it or anything </summary>
		internal const string Select_Books = @"Select * From books;";
		#endregion
		#region Properties
		public long? id { get;set; }
		public string title { get;set; }
		public string sort { get;set; }
		public string timestamp { get;set; }
		public DateTime? pubdate { get;set; }
		public double? series_index { get;set; }
		public string author_sort { get;set; }
		public string isbn { get;set; }
		public string lccn { get;set; }
		public string path { get;set; }
		public long? flags { get;set; }
		public string uuid { get;set; }
		public bool? has_cover { get;set; }
		public DateTime? last_modified { get;set; }
		#endregion
		#region Constructors

		public Books(DataRowView row)
		{
			if (row["id"]!=DBNull.Value) this.id = row["id"] as long?;
			if (row["title"]!=DBNull.Value) this.title = row["title"] as string;
			if (row["sort"]!=DBNull.Value) this.sort = row["sort"] as string;
			if (row["timestamp"]!=DBNull.Value) this.timestamp = row["timestamp"] as string;
			if (row["pubdate"]!=DBNull.Value) this.pubdate = row["pubdate"] as DateTime?;
			if (row["series_index"]!=DBNull.Value) this.series_index = row["series_index"] as double?;
			if (row["author_sort"]!=DBNull.Value) this.author_sort = row["author_sort"] as string;
			if (row["isbn"]!=DBNull.Value) this.isbn = row["isbn"] as string;
			if (row["lccn"]!=DBNull.Value) this.lccn = row["lccn"] as string;
			if (row["path"]!=DBNull.Value) this.path = row["path"] as string;
			if (row["flags"]!=DBNull.Value) this.flags = row["flags"] as long?;
			if (row["uuid"]!=DBNull.Value) this.uuid = row["uuid"] as string;
			if (row["has_cover"]!=DBNull.Value) this.has_cover = row["has_cover"] as bool?;
			if (row["last_modified"]!=DBNull.Value) this.last_modified = row["last_modified"] as DateTime?;
		}
		public DataRowView ToRow(DataRowView row)
		{
			if (row["id"]!=DBNull.Value) this.id = row["id"] as long?;
			if (row["title"]!=DBNull.Value) this.title = row["title"] as string;
			if (row["sort"]!=DBNull.Value) this.sort = row["sort"] as string;
			if (row["timestamp"]!=DBNull.Value) this.timestamp = row["timestamp"] as string;
			if (row["pubdate"]!=DBNull.Value) this.pubdate = row["pubdate"] as DateTime?;
			if (row["series_index"]!=DBNull.Value) this.series_index = row["series_index"] as double?;
			if (row["author_sort"]!=DBNull.Value) this.author_sort = row["author_sort"] as string;
			if (row["isbn"]!=DBNull.Value) this.isbn = row["isbn"] as string;
			if (row["lccn"]!=DBNull.Value) this.lccn = row["lccn"] as string;
			if (row["path"]!=DBNull.Value) this.path = row["path"] as string;
			if (row["flags"]!=DBNull.Value) this.flags = row["flags"] as long?;
			if (row["uuid"]!=DBNull.Value) this.uuid = row["uuid"] as string;
			if (row["has_cover"]!=DBNull.Value) this.has_cover = row["has_cover"] as bool?;
			if (row["last_modified"]!=DBNull.Value) this.last_modified = row["last_modified"] as DateTime?;
			return row;
		}

		public Books(){}
		/// <summary>
		/// Used for cloning operations.
		/// <para>Particularly for Insert/Update SQL Queries due to the readonly PRIMARY KEY value.</para>
		/// </summary>
		public Books(Books value)
		{
			this.id = value.id;
			this.title = value.title;
			this.sort = value.sort;
			this.timestamp = value.timestamp;
			this.pubdate = value.pubdate;
			this.series_index = value.series_index;
			this.author_sort = value.author_sort;
			this.isbn = value.isbn;
			this.lccn = value.lccn;
			this.path = value.path;
			this.flags = value.flags;
			this.uuid = value.uuid;
			this.has_cover = value.has_cover;
			this.last_modified = value.last_modified;
		}
		#region NONONO
		#if NONONO
		
		/// <summary>
		/// Used for cloning operations.
		/// <para>Particularly for Insert/Update SQL Queries due to the readonly PRIMARY KEY value.</para>
		/// </summary>
		public Books(Books value)
		{
			this.id = value.id;
			this.SetFields(value);
		}
		#endif
		#endregion
		#endregion
		#region Utils

		/// <summary>
		/// Used for cloning operations.
		/// <para>Particularly for Insert/Update SQL Queries due to the readonly PRIMARY KEY value.</para>
		/// </summary>
		public void SetFields(Books value)
		{
			this.title = value.title;
			this.sort = value.sort;
			this.timestamp = value.timestamp;
			this.pubdate = value.pubdate;
			this.series_index = value.series_index;
			this.author_sort = value.author_sort;
			this.isbn = value.isbn;
			this.lccn = value.lccn;
			this.path = value.path;
			this.flags = value.flags;
			this.uuid = value.uuid;
			this.has_cover = value.has_cover;
			this.last_modified = value.last_modified;
		}

		// TODO: add if (usePrimary) to the primary key
		// an insert statement would not use or contain
		// a primary key value (or would contain a null,
		// hence we provide the oppertunity to neglect
		// it here.
		public SQLiteCommand Parameterize(SQLiteCommand cmd, bool usePrimary)
		{
			if (usePrimary) cmd.Parameters.AddWithValue("@xid", this.id);
			cmd.Parameters.AddWithValue("@title", this.title);
			cmd.Parameters.AddWithValue("@sort", this.sort);
			cmd.Parameters.AddWithValue("@timestamp", this.timestamp);
			cmd.Parameters.AddWithValue("@pubdate", this.pubdate);
			cmd.Parameters.AddWithValue("@series_index", this.series_index);
			cmd.Parameters.AddWithValue("@author_sort", this.author_sort);
			cmd.Parameters.AddWithValue("@isbn", this.isbn);
			cmd.Parameters.AddWithValue("@lccn", this.lccn);
			cmd.Parameters.AddWithValue("@path", this.path);
			cmd.Parameters.AddWithValue("@flags", this.flags);
			cmd.Parameters.AddWithValue("@uuid", this.uuid);
			cmd.Parameters.AddWithValue("@has_cover", this.has_cover);
			cmd.Parameters.AddWithValue("@last_modified", this.last_modified);
			return cmd;
		}
		#endregion
		#region template['?']['newTable']

		static public void SetupTable(DataTable table)
		{
			table.Columns.Add("id",typeof(Int64));
			table.Columns.Add("title",typeof(String));
			table.Columns.Add("sort",typeof(String));
			table.Columns.Add("timestamp",typeof(String));
			table.Columns.Add("pubdate",typeof(DateTime));
			table.Columns.Add("series_index",typeof(Double));
			table.Columns.Add("author_sort",typeof(String));
			table.Columns.Add("isbn",typeof(String));
			table.Columns.Add("lccn",typeof(String));
			table.Columns.Add("path",typeof(String));
			table.Columns.Add("flags",typeof(Int64));
			table.Columns.Add("uuid",typeof(String));
			table.Columns.Add("has_cover",typeof(Boolean));
			table.Columns.Add("last_modified",typeof(DateTime));
			table.PrimaryKey = new DataColumn[]{ table.Columns["id"] };
		}

		#endregion
		#region template['prime.struct']['struct rowfrom']

		static public Books FromRowView(DataRowView row)
		{
			var model = new Books();
			if (row["id"]!=DBNull.Value) model.id = row["id"] as long?;
			if (row["title"]!=DBNull.Value) model.title = row["title"] as string;
			if (row["sort"]!=DBNull.Value) model.sort = row["sort"] as string;
			if (row["timestamp"]!=DBNull.Value) model.timestamp = row["timestamp"] as string;
			if (row["pubdate"]!=DBNull.Value) model.pubdate = row["pubdate"] as DateTime?;
			if (row["series_index"]!=DBNull.Value) model.series_index = row["series_index"] as double?;
			if (row["author_sort"]!=DBNull.Value) model.author_sort = row["author_sort"] as string;
			if (row["isbn"]!=DBNull.Value) model.isbn = row["isbn"] as string;
			if (row["lccn"]!=DBNull.Value) model.lccn = row["lccn"] as string;
			if (row["path"]!=DBNull.Value) model.path = row["path"] as string;
			if (row["flags"]!=DBNull.Value) model.flags = row["flags"] as long?;
			if (row["uuid"]!=DBNull.Value) model.uuid = row["uuid"] as string;
			if (row["has_cover"]!=DBNull.Value) model.has_cover = row["has_cover"] as bool?;
			if (row["last_modified"]!=DBNull.Value) model.last_modified = row["last_modified"] as DateTime?;
			return model;
		}

		#endregion
	}

	// Generated by a tool : 07/27/2014 06:25:37.388 PM
	// ------------------------
	public partial class Data
	{
		static public implicit operator Data(DataRowView row) { return Data.FromRowView(row); }
		// a custom variable
		public string SQLiteDataPath
		{
			get;
			internal set;
		}
		static public string StringForData(string input, Data m)
		{
			return input
				.Replace("{id}", string.Format("{0}",m.id))
				.Replace("{book}", string.Format("{0}",m.book))
				.Replace("{format}", string.Format("{0}",m.format))
				.Replace("{uncompressed_size}", string.Format("{0}",m.uncompressed_size))
				.Replace("{name}", string.Format("{0}",m.name));
		}

		static public string StringForData(string input, DataRowView row)
		{
			return input
				.Replace("{id}", string.Format("{0}",row["id"]))
				.Replace("{book}", string.Format("{0}",row["book"]))
				.Replace("{format}", string.Format("{0}",row["format"]))
				.Replace("{uncompressed_size}", string.Format("{0}",row["uncompressed_size"]))
				.Replace("{name}", string.Format("{0}",row["name"]));
		}

		#region Queries
		/// <summary> not that we need it or anything </summary>
		internal const string Insert_Data = @"INSERT INTO [data] (
	[book],
	[format],
	[uncompressed_size],
	[name])
VALUES(
	@book,
	@format,
	@uncompressed_size,
	@name);";
		/// <summary> not that we need it or anything </summary>
		internal const string Update_Data = @"UPDATE [data] SET 
		[book] = @book,
		[format] = @format,
		[uncompressed_size] = @uncompressed_size,
		[name] = @name
WHERE [id] = @xid;";
		/// <summary> not that we need it or anything </summary>
		internal const string Select_Data = @"Select * From data;";
		#endregion
		#region Properties
		public long? id { get;set; }
		public long? book { get;set; }
		public string format { get;set; }
		public string uncompressed_size { get;set; }
		public string name { get;set; }
		#endregion
		#region Constructors

		public Data(DataRowView row)
		{
			if (row["id"]!=DBNull.Value) this.id = row["id"] as long?;
			if (row["book"]!=DBNull.Value) this.book = row["book"] as long?;
			if (row["format"]!=DBNull.Value) this.format = row["format"] as string;
			if (row["uncompressed_size"]!=DBNull.Value) this.uncompressed_size = row["uncompressed_size"] as string;
			if (row["name"]!=DBNull.Value) this.name = row["name"] as string;
		}
		public DataRowView ToRow(DataRowView row)
		{
			if (row["id"]!=DBNull.Value) this.id = row["id"] as long?;
			if (row["book"]!=DBNull.Value) this.book = row["book"] as long?;
			if (row["format"]!=DBNull.Value) this.format = row["format"] as string;
			if (row["uncompressed_size"]!=DBNull.Value) this.uncompressed_size = row["uncompressed_size"] as string;
			if (row["name"]!=DBNull.Value) this.name = row["name"] as string;
			return row;
		}

		public Data(){}
		/// <summary>
		/// Used for cloning operations.
		/// <para>Particularly for Insert/Update SQL Queries due to the readonly PRIMARY KEY value.</para>
		/// </summary>
		public Data(Data value)
		{
			this.id = value.id;
			this.book = value.book;
			this.format = value.format;
			this.uncompressed_size = value.uncompressed_size;
			this.name = value.name;
		}
		#region NONONO
		#if NONONO
		
		/// <summary>
		/// Used for cloning operations.
		/// <para>Particularly for Insert/Update SQL Queries due to the readonly PRIMARY KEY value.</para>
		/// </summary>
		public Data(Data value)
		{
			this.id = value.id;
			this.SetFields(value);
		}
		#endif
		#endregion
		#endregion
		#region Utils

		/// <summary>
		/// Used for cloning operations.
		/// <para>Particularly for Insert/Update SQL Queries due to the readonly PRIMARY KEY value.</para>
		/// </summary>
		public void SetFields(Data value)
		{
			this.book = value.book;
			this.format = value.format;
			this.uncompressed_size = value.uncompressed_size;
			this.name = value.name;
		}

		// TODO: add if (usePrimary) to the primary key
		// an insert statement would not use or contain
		// a primary key value (or would contain a null,
		// hence we provide the oppertunity to neglect
		// it here.
		public SQLiteCommand Parameterize(SQLiteCommand cmd, bool usePrimary)
		{
			if (usePrimary) cmd.Parameters.AddWithValue("@xid", this.id);
			cmd.Parameters.AddWithValue("@book", this.book);
			cmd.Parameters.AddWithValue("@format", this.format);
			cmd.Parameters.AddWithValue("@uncompressed_size", this.uncompressed_size);
			cmd.Parameters.AddWithValue("@name", this.name);
			return cmd;
		}
		#endregion
		#region template['?']['newTable']

		static public void SetupTable(DataTable table)
		{
			table.Columns.Add("id",typeof(Int64));
			table.Columns.Add("book",typeof(Int64));
			table.Columns.Add("format",typeof(String));
			table.Columns.Add("uncompressed_size",typeof(String));
			table.Columns.Add("name",typeof(String));
			table.PrimaryKey = new DataColumn[]{ table.Columns["id"] };
		}

		#endregion
		#region template['prime.struct']['struct rowfrom']

		static public Data FromRowView(DataRowView row)
		{
			var model = new Data();
			if (row["id"]!=DBNull.Value) model.id = row["id"] as long?;
			if (row["book"]!=DBNull.Value) model.book = row["book"] as long?;
			if (row["format"]!=DBNull.Value) model.format = row["format"] as string;
			if (row["uncompressed_size"]!=DBNull.Value) model.uncompressed_size = row["uncompressed_size"] as string;
			if (row["name"]!=DBNull.Value) model.name = row["name"] as string;
			return model;
		}

		#endregion
	}

	// Generated by a tool : 07/27/2014 06:25:37.391 PM
	// ------------------------
	public partial class Comments
	{
		static public implicit operator Comments(DataRowView row) { return Comments.FromRowView(row); }
		// a custom variable
		public string SQLiteDataPath
		{
			get;
			internal set;
		}
		static public string StringForComments(string input, Comments m)
		{
			return input
				.Replace("{id}", string.Format("{0}",m.id))
				.Replace("{book}", string.Format("{0}",m.book))
				.Replace("{text}", string.Format("{0}",m.text));
		}

		static public string StringForComments(string input, DataRowView row)
		{
			return input
				.Replace("{id}", string.Format("{0}",row["id"]))
				.Replace("{book}", string.Format("{0}",row["book"]))
				.Replace("{text}", string.Format("{0}",row["text"]));
		}

		#region Queries
		/// <summary> not that we need it or anything </summary>
		internal const string Insert_Comments = @"INSERT INTO [comments] (
	[book],
	[text])
VALUES(
	@book,
	@text);";
		/// <summary> not that we need it or anything </summary>
		internal const string Update_Comments = @"UPDATE [comments] SET 
		[book] = @book,
		[text] = @text
WHERE [id] = @xid;";
		/// <summary> not that we need it or anything </summary>
		internal const string Select_Comments = @"Select * From comments;";
		#endregion
		#region Properties
		public long? id { get;set; }
		public long? book { get;set; }
		public string text { get;set; }
		#endregion
		#region Constructors

		public Comments(DataRowView row)
		{
			if (row["id"]!=DBNull.Value) this.id = row["id"] as long?;
			if (row["book"]!=DBNull.Value) this.book = row["book"] as long?;
			if (row["text"]!=DBNull.Value) this.text = row["text"] as string;
		}
		public DataRowView ToRow(DataRowView row)
		{
			if (row["id"]!=DBNull.Value) this.id = row["id"] as long?;
			if (row["book"]!=DBNull.Value) this.book = row["book"] as long?;
			if (row["text"]!=DBNull.Value) this.text = row["text"] as string;
			return row;
		}

		public Comments(){}
		/// <summary>
		/// Used for cloning operations.
		/// <para>Particularly for Insert/Update SQL Queries due to the readonly PRIMARY KEY value.</para>
		/// </summary>
		public Comments(Comments value)
		{
			this.id = value.id;
			this.book = value.book;
			this.text = value.text;
		}
		#region NONONO
		#if NONONO
		
		/// <summary>
		/// Used for cloning operations.
		/// <para>Particularly for Insert/Update SQL Queries due to the readonly PRIMARY KEY value.</para>
		/// </summary>
		public Comments(Comments value)
		{
			this.id = value.id;
			this.SetFields(value);
		}
		#endif
		#endregion
		#endregion
		#region Utils

		/// <summary>
		/// Used for cloning operations.
		/// <para>Particularly for Insert/Update SQL Queries due to the readonly PRIMARY KEY value.</para>
		/// </summary>
		public void SetFields(Comments value)
		{
			this.book = value.book;
			this.text = value.text;
		}

		// TODO: add if (usePrimary) to the primary key
		// an insert statement would not use or contain
		// a primary key value (or would contain a null,
		// hence we provide the oppertunity to neglect
		// it here.
		public SQLiteCommand Parameterize(SQLiteCommand cmd, bool usePrimary)
		{
			if (usePrimary) cmd.Parameters.AddWithValue("@xid", this.id);
			cmd.Parameters.AddWithValue("@book", this.book);
			cmd.Parameters.AddWithValue("@text", this.text);
			return cmd;
		}
		#endregion
		#region template['?']['newTable']

		static public void SetupTable(DataTable table)
		{
			table.Columns.Add("id",typeof(Int64));
			table.Columns.Add("book",typeof(Int64));
			table.Columns.Add("text",typeof(String));
			table.PrimaryKey = new DataColumn[]{ table.Columns["id"] };
		}

		#endregion
		#region template['prime.struct']['struct rowfrom']

		static public Comments FromRowView(DataRowView row)
		{
			var model = new Comments();
			if (row["id"]!=DBNull.Value) model.id = row["id"] as long?;
			if (row["book"]!=DBNull.Value) model.book = row["book"] as long?;
			if (row["text"]!=DBNull.Value) model.text = row["text"] as string;
			return model;
		}

		#endregion
	}

	// Generated by a tool : 07/27/2014 06:25:37.393 PM
	// ------------------------
	public partial class Authors
	{
		static public implicit operator Authors(DataRowView row) { return Authors.FromRowView(row); }
		// a custom variable
		public string SQLiteDataPath
		{
			get;
			internal set;
		}
		static public string StringForAuthors(string input, Authors m)
		{
			return input
				.Replace("{id}", string.Format("{0}",m.id))
				.Replace("{name}", string.Format("{0}",m.name))
				.Replace("{sort}", string.Format("{0}",m.sort))
				.Replace("{link}", string.Format("{0}",m.link));
		}

		static public string StringForAuthors(string input, DataRowView row)
		{
			return input
				.Replace("{id}", string.Format("{0}",row["id"]))
				.Replace("{name}", string.Format("{0}",row["name"]))
				.Replace("{sort}", string.Format("{0}",row["sort"]))
				.Replace("{link}", string.Format("{0}",row["link"]));
		}

		#region Queries
		/// <summary> not that we need it or anything </summary>
		internal const string Insert_Authors = @"INSERT INTO [authors] (
	[name],
	[sort],
	[link])
VALUES(
	@name,
	@sort,
	@link);";
		/// <summary> not that we need it or anything </summary>
		internal const string Update_Authors = @"UPDATE [authors] SET 
		[name] = @name,
		[sort] = @sort,
		[link] = @link
WHERE [id] = @xid;";
		/// <summary> not that we need it or anything </summary>
		internal const string Select_Authors = @"Select * From authors;";
		#endregion
		#region Properties
		public long? id { get;set; }
		public string name { get;set; }
		public string sort { get;set; }
		public string link { get;set; }
		#endregion
		#region Constructors

		public Authors(DataRowView row)
		{
			if (row["id"]!=DBNull.Value) this.id = row["id"] as long?;
			if (row["name"]!=DBNull.Value) this.name = row["name"] as string;
			if (row["sort"]!=DBNull.Value) this.sort = row["sort"] as string;
			if (row["link"]!=DBNull.Value) this.link = row["link"] as string;
		}
		public DataRowView ToRow(DataRowView row)
		{
			if (row["id"]!=DBNull.Value) this.id = row["id"] as long?;
			if (row["name"]!=DBNull.Value) this.name = row["name"] as string;
			if (row["sort"]!=DBNull.Value) this.sort = row["sort"] as string;
			if (row["link"]!=DBNull.Value) this.link = row["link"] as string;
			return row;
		}

		public Authors(){}
		/// <summary>
		/// Used for cloning operations.
		/// <para>Particularly for Insert/Update SQL Queries due to the readonly PRIMARY KEY value.</para>
		/// </summary>
		public Authors(Authors value)
		{
			this.id = value.id;
			this.name = value.name;
			this.sort = value.sort;
			this.link = value.link;
		}
		#region NONONO
		#if NONONO
		
		/// <summary>
		/// Used for cloning operations.
		/// <para>Particularly for Insert/Update SQL Queries due to the readonly PRIMARY KEY value.</para>
		/// </summary>
		public Authors(Authors value)
		{
			this.id = value.id;
			this.SetFields(value);
		}
		#endif
		#endregion
		#endregion
		#region Utils

		/// <summary>
		/// Used for cloning operations.
		/// <para>Particularly for Insert/Update SQL Queries due to the readonly PRIMARY KEY value.</para>
		/// </summary>
		public void SetFields(Authors value)
		{
			this.name = value.name;
			this.sort = value.sort;
			this.link = value.link;
		}

		// TODO: add if (usePrimary) to the primary key
		// an insert statement would not use or contain
		// a primary key value (or would contain a null,
		// hence we provide the oppertunity to neglect
		// it here.
		public SQLiteCommand Parameterize(SQLiteCommand cmd, bool usePrimary)
		{
			if (usePrimary) cmd.Parameters.AddWithValue("@xid", this.id);
			cmd.Parameters.AddWithValue("@name", this.name);
			cmd.Parameters.AddWithValue("@sort", this.sort);
			cmd.Parameters.AddWithValue("@link", this.link);
			return cmd;
		}
		#endregion
		#region template['?']['newTable']

		static public void SetupTable(DataTable table)
		{
			table.Columns.Add("id",typeof(Int64));
			table.Columns.Add("name",typeof(String));
			table.Columns.Add("sort",typeof(String));
			table.Columns.Add("link",typeof(String));
			table.PrimaryKey = new DataColumn[]{ table.Columns["id"] };
		}

		#endregion
		#region template['prime.struct']['struct rowfrom']

		static public Authors FromRowView(DataRowView row)
		{
			var model = new Authors();
			if (row["id"]!=DBNull.Value) model.id = row["id"] as long?;
			if (row["name"]!=DBNull.Value) model.name = row["name"] as string;
			if (row["sort"]!=DBNull.Value) model.sort = row["sort"] as string;
			if (row["link"]!=DBNull.Value) model.link = row["link"] as string;
			return model;
		}

		#endregion
	}

	// Generated by a tool : 07/27/2014 06:25:37.395 PM
	// ------------------------
	public partial class Books_authors_link
	{
		static public implicit operator Books_authors_link(DataRowView row) { return Books_authors_link.FromRowView(row); }
		// a custom variable
		public string SQLiteDataPath
		{
			get;
			internal set;
		}
		static public string StringForBooks_authors_link(string input, Books_authors_link m)
		{
			return input
				.Replace("{id}", string.Format("{0}",m.id))
				.Replace("{book}", string.Format("{0}",m.book))
				.Replace("{author}", string.Format("{0}",m.author));
		}

		static public string StringForBooks_authors_link(string input, DataRowView row)
		{
			return input
				.Replace("{id}", string.Format("{0}",row["id"]))
				.Replace("{book}", string.Format("{0}",row["book"]))
				.Replace("{author}", string.Format("{0}",row["author"]));
		}

		#region Queries
		/// <summary> not that we need it or anything </summary>
		internal const string Insert_Books_authors_link = @"INSERT INTO [books_authors_link] (
	[book],
	[author])
VALUES(
	@book,
	@author);";
		/// <summary> not that we need it or anything </summary>
		internal const string Update_Books_authors_link = @"UPDATE [books_authors_link] SET 
		[book] = @book,
		[author] = @author
WHERE [id] = @xid;";
		/// <summary> not that we need it or anything </summary>
		internal const string Select_Books_authors_link = @"Select * From books_authors_link;";
		#endregion
		#region Properties
		public long? id { get;set; }
		public long? book { get;set; }
		public long? author { get;set; }
		#endregion
		#region Constructors

		public Books_authors_link(DataRowView row)
		{
			if (row["id"]!=DBNull.Value) this.id = row["id"] as long?;
			if (row["book"]!=DBNull.Value) this.book = row["book"] as long?;
			if (row["author"]!=DBNull.Value) this.author = row["author"] as long?;
		}
		public DataRowView ToRow(DataRowView row)
		{
			if (row["id"]!=DBNull.Value) this.id = row["id"] as long?;
			if (row["book"]!=DBNull.Value) this.book = row["book"] as long?;
			if (row["author"]!=DBNull.Value) this.author = row["author"] as long?;
			return row;
		}

		public Books_authors_link(){}
		/// <summary>
		/// Used for cloning operations.
		/// <para>Particularly for Insert/Update SQL Queries due to the readonly PRIMARY KEY value.</para>
		/// </summary>
		public Books_authors_link(Books_authors_link value)
		{
			this.id = value.id;
			this.book = value.book;
			this.author = value.author;
		}
		#region NONONO
		#if NONONO
		
		/// <summary>
		/// Used for cloning operations.
		/// <para>Particularly for Insert/Update SQL Queries due to the readonly PRIMARY KEY value.</para>
		/// </summary>
		public Books_authors_link(Books_authors_link value)
		{
			this.id = value.id;
			this.SetFields(value);
		}
		#endif
		#endregion
		#endregion
		#region Utils

		/// <summary>
		/// Used for cloning operations.
		/// <para>Particularly for Insert/Update SQL Queries due to the readonly PRIMARY KEY value.</para>
		/// </summary>
		public void SetFields(Books_authors_link value)
		{
			this.book = value.book;
			this.author = value.author;
		}

		// TODO: add if (usePrimary) to the primary key
		// an insert statement would not use or contain
		// a primary key value (or would contain a null,
		// hence we provide the oppertunity to neglect
		// it here.
		public SQLiteCommand Parameterize(SQLiteCommand cmd, bool usePrimary)
		{
			if (usePrimary) cmd.Parameters.AddWithValue("@xid", this.id);
			cmd.Parameters.AddWithValue("@book", this.book);
			cmd.Parameters.AddWithValue("@author", this.author);
			return cmd;
		}
		#endregion
		#region template['?']['newTable']

		static public void SetupTable(DataTable table)
		{
			table.Columns.Add("id",typeof(Int64));
			table.Columns.Add("book",typeof(Int64));
			table.Columns.Add("author",typeof(Int64));
			table.PrimaryKey = new DataColumn[]{ table.Columns["id"] };
		}

		#endregion
		#region template['prime.struct']['struct rowfrom']

		static public Books_authors_link FromRowView(DataRowView row)
		{
			var model = new Books_authors_link();
			if (row["id"]!=DBNull.Value) model.id = row["id"] as long?;
			if (row["book"]!=DBNull.Value) model.book = row["book"] as long?;
			if (row["author"]!=DBNull.Value) model.author = row["author"] as long?;
			return model;
		}

		#endregion
	}

	// Generated by a tool : 07/27/2014 06:25:37.397 PM
	// ------------------------
	public partial class Publishers
	{
		static public implicit operator Publishers(DataRowView row) { return Publishers.FromRowView(row); }
		// a custom variable
		public string SQLiteDataPath
		{
			get;
			internal set;
		}
		static public string StringForPublishers(string input, Publishers m)
		{
			return input
				.Replace("{id}", string.Format("{0}",m.id))
				.Replace("{name}", string.Format("{0}",m.name))
				.Replace("{sort}", string.Format("{0}",m.sort));
		}

		static public string StringForPublishers(string input, DataRowView row)
		{
			return input
				.Replace("{id}", string.Format("{0}",row["id"]))
				.Replace("{name}", string.Format("{0}",row["name"]))
				.Replace("{sort}", string.Format("{0}",row["sort"]));
		}

		#region Queries
		/// <summary> not that we need it or anything </summary>
		internal const string Insert_Publishers = @"INSERT INTO [publishers] (
	[name],
	[sort])
VALUES(
	@name,
	@sort);";
		/// <summary> not that we need it or anything </summary>
		internal const string Update_Publishers = @"UPDATE [publishers] SET 
		[name] = @name,
		[sort] = @sort
WHERE [id] = @xid;";
		/// <summary> not that we need it or anything </summary>
		internal const string Select_Publishers = @"Select * From publishers;";
		#endregion
		#region Properties
		public long? id { get;set; }
		public string name { get;set; }
		public string sort { get;set; }
		#endregion
		#region Constructors

		public Publishers(DataRowView row)
		{
			if (row["id"]!=DBNull.Value) this.id = row["id"] as long?;
			if (row["name"]!=DBNull.Value) this.name = row["name"] as string;
			if (row["sort"]!=DBNull.Value) this.sort = row["sort"] as string;
		}
		public DataRowView ToRow(DataRowView row)
		{
			if (row["id"]!=DBNull.Value) this.id = row["id"] as long?;
			if (row["name"]!=DBNull.Value) this.name = row["name"] as string;
			if (row["sort"]!=DBNull.Value) this.sort = row["sort"] as string;
			return row;
		}

		public Publishers(){}
		/// <summary>
		/// Used for cloning operations.
		/// <para>Particularly for Insert/Update SQL Queries due to the readonly PRIMARY KEY value.</para>
		/// </summary>
		public Publishers(Publishers value)
		{
			this.id = value.id;
			this.name = value.name;
			this.sort = value.sort;
		}
		#region NONONO
		#if NONONO
		
		/// <summary>
		/// Used for cloning operations.
		/// <para>Particularly for Insert/Update SQL Queries due to the readonly PRIMARY KEY value.</para>
		/// </summary>
		public Publishers(Publishers value)
		{
			this.id = value.id;
			this.SetFields(value);
		}
		#endif
		#endregion
		#endregion
		#region Utils

		/// <summary>
		/// Used for cloning operations.
		/// <para>Particularly for Insert/Update SQL Queries due to the readonly PRIMARY KEY value.</para>
		/// </summary>
		public void SetFields(Publishers value)
		{
			this.name = value.name;
			this.sort = value.sort;
		}

		// TODO: add if (usePrimary) to the primary key
		// an insert statement would not use or contain
		// a primary key value (or would contain a null,
		// hence we provide the oppertunity to neglect
		// it here.
		public SQLiteCommand Parameterize(SQLiteCommand cmd, bool usePrimary)
		{
			if (usePrimary) cmd.Parameters.AddWithValue("@xid", this.id);
			cmd.Parameters.AddWithValue("@name", this.name);
			cmd.Parameters.AddWithValue("@sort", this.sort);
			return cmd;
		}
		#endregion
		#region template['?']['newTable']

		static public void SetupTable(DataTable table)
		{
			table.Columns.Add("id",typeof(Int64));
			table.Columns.Add("name",typeof(String));
			table.Columns.Add("sort",typeof(String));
			table.PrimaryKey = new DataColumn[]{ table.Columns["id"] };
		}

		#endregion
		#region template['prime.struct']['struct rowfrom']

		static public Publishers FromRowView(DataRowView row)
		{
			var model = new Publishers();
			if (row["id"]!=DBNull.Value) model.id = row["id"] as long?;
			if (row["name"]!=DBNull.Value) model.name = row["name"] as string;
			if (row["sort"]!=DBNull.Value) model.sort = row["sort"] as string;
			return model;
		}

		#endregion
	}

	// Generated by a tool : 07/27/2014 06:25:37.398 PM
	// ------------------------
	public partial class Books_publishers_link
	{
		static public implicit operator Books_publishers_link(DataRowView row) { return Books_publishers_link.FromRowView(row); }
		// a custom variable
		public string SQLiteDataPath
		{
			get;
			internal set;
		}
		static public string StringForBooks_publishers_link(string input, Books_publishers_link m)
		{
			return input
				.Replace("{id}", string.Format("{0}",m.id))
				.Replace("{book}", string.Format("{0}",m.book))
				.Replace("{publisher}", string.Format("{0}",m.publisher));
		}

		static public string StringForBooks_publishers_link(string input, DataRowView row)
		{
			return input
				.Replace("{id}", string.Format("{0}",row["id"]))
				.Replace("{book}", string.Format("{0}",row["book"]))
				.Replace("{publisher}", string.Format("{0}",row["publisher"]));
		}

		#region Queries
		/// <summary> not that we need it or anything </summary>
		internal const string Insert_Books_publishers_link = @"INSERT INTO [books_publishers_link] (
	[book],
	[publisher])
VALUES(
	@book,
	@publisher);";
		/// <summary> not that we need it or anything </summary>
		internal const string Update_Books_publishers_link = @"UPDATE [books_publishers_link] SET 
		[book] = @book,
		[publisher] = @publisher
WHERE [id] = @xid;";
		/// <summary> not that we need it or anything </summary>
		internal const string Select_Books_publishers_link = @"Select * From books_publishers_link;";
		#endregion
		#region Properties
		public long? id { get;set; }
		public long? book { get;set; }
		public long? publisher { get;set; }
		#endregion
		#region Constructors

		public Books_publishers_link(DataRowView row)
		{
			if (row["id"]!=DBNull.Value) this.id = row["id"] as long?;
			if (row["book"]!=DBNull.Value) this.book = row["book"] as long?;
			if (row["publisher"]!=DBNull.Value) this.publisher = row["publisher"] as long?;
		}
		public DataRowView ToRow(DataRowView row)
		{
			if (row["id"]!=DBNull.Value) this.id = row["id"] as long?;
			if (row["book"]!=DBNull.Value) this.book = row["book"] as long?;
			if (row["publisher"]!=DBNull.Value) this.publisher = row["publisher"] as long?;
			return row;
		}

		public Books_publishers_link(){}
		/// <summary>
		/// Used for cloning operations.
		/// <para>Particularly for Insert/Update SQL Queries due to the readonly PRIMARY KEY value.</para>
		/// </summary>
		public Books_publishers_link(Books_publishers_link value)
		{
			this.id = value.id;
			this.book = value.book;
			this.publisher = value.publisher;
		}
		#region NONONO
		#if NONONO
		
		/// <summary>
		/// Used for cloning operations.
		/// <para>Particularly for Insert/Update SQL Queries due to the readonly PRIMARY KEY value.</para>
		/// </summary>
		public Books_publishers_link(Books_publishers_link value)
		{
			this.id = value.id;
			this.SetFields(value);
		}
		#endif
		#endregion
		#endregion
		#region Utils

		/// <summary>
		/// Used for cloning operations.
		/// <para>Particularly for Insert/Update SQL Queries due to the readonly PRIMARY KEY value.</para>
		/// </summary>
		public void SetFields(Books_publishers_link value)
		{
			this.book = value.book;
			this.publisher = value.publisher;
		}

		// TODO: add if (usePrimary) to the primary key
		// an insert statement would not use or contain
		// a primary key value (or would contain a null,
		// hence we provide the oppertunity to neglect
		// it here.
		public SQLiteCommand Parameterize(SQLiteCommand cmd, bool usePrimary)
		{
			if (usePrimary) cmd.Parameters.AddWithValue("@xid", this.id);
			cmd.Parameters.AddWithValue("@book", this.book);
			cmd.Parameters.AddWithValue("@publisher", this.publisher);
			return cmd;
		}
		#endregion
		#region template['?']['newTable']

		static public void SetupTable(DataTable table)
		{
			table.Columns.Add("id",typeof(Int64));
			table.Columns.Add("book",typeof(Int64));
			table.Columns.Add("publisher",typeof(Int64));
			table.PrimaryKey = new DataColumn[]{ table.Columns["id"] };
		}

		#endregion
		#region template['prime.struct']['struct rowfrom']

		static public Books_publishers_link FromRowView(DataRowView row)
		{
			var model = new Books_publishers_link();
			if (row["id"]!=DBNull.Value) model.id = row["id"] as long?;
			if (row["book"]!=DBNull.Value) model.book = row["book"] as long?;
			if (row["publisher"]!=DBNull.Value) model.publisher = row["publisher"] as long?;
			return model;
		}

		#endregion
	}

	// Generated by a tool : 07/27/2014 06:25:37.400 PM
	// ------------------------
	public partial class Tags
	{
		static public implicit operator Tags(DataRowView row) { return Tags.FromRowView(row); }
		// a custom variable
		public string SQLiteDataPath
		{
			get;
			internal set;
		}
		static public string StringForTags(string input, Tags m)
		{
			return input
				.Replace("{id}", string.Format("{0}",m.id))
				.Replace("{name}", string.Format("{0}",m.name));
		}

		static public string StringForTags(string input, DataRowView row)
		{
			return input
				.Replace("{id}", string.Format("{0}",row["id"]))
				.Replace("{name}", string.Format("{0}",row["name"]));
		}

		#region Queries
		/// <summary> not that we need it or anything </summary>
		internal const string Insert_Tags = @"INSERT INTO [tags] (
	[name])
VALUES(
	@name);";
		/// <summary> not that we need it or anything </summary>
		internal const string Update_Tags = @"UPDATE [tags] SET 
		[name] = @name
WHERE [id] = @xid;";
		/// <summary> not that we need it or anything </summary>
		internal const string Select_Tags = @"Select * From tags;";
		#endregion
		#region Properties
		public long? id { get;set; }
		public string name { get;set; }
		#endregion
		#region Constructors

		public Tags(DataRowView row)
		{
			if (row["id"]!=DBNull.Value) this.id = row["id"] as long?;
			if (row["name"]!=DBNull.Value) this.name = row["name"] as string;
		}
		public DataRowView ToRow(DataRowView row)
		{
			if (row["id"]!=DBNull.Value) this.id = row["id"] as long?;
			if (row["name"]!=DBNull.Value) this.name = row["name"] as string;
			return row;
		}

		public Tags(){}
		/// <summary>
		/// Used for cloning operations.
		/// <para>Particularly for Insert/Update SQL Queries due to the readonly PRIMARY KEY value.</para>
		/// </summary>
		public Tags(Tags value)
		{
			this.id = value.id;
			this.name = value.name;
		}
		#region NONONO
		#if NONONO
		
		/// <summary>
		/// Used for cloning operations.
		/// <para>Particularly for Insert/Update SQL Queries due to the readonly PRIMARY KEY value.</para>
		/// </summary>
		public Tags(Tags value)
		{
			this.id = value.id;
			this.SetFields(value);
		}
		#endif
		#endregion
		#endregion
		#region Utils

		/// <summary>
		/// Used for cloning operations.
		/// <para>Particularly for Insert/Update SQL Queries due to the readonly PRIMARY KEY value.</para>
		/// </summary>
		public void SetFields(Tags value)
		{
			this.name = value.name;
		}

		// TODO: add if (usePrimary) to the primary key
		// an insert statement would not use or contain
		// a primary key value (or would contain a null,
		// hence we provide the oppertunity to neglect
		// it here.
		public SQLiteCommand Parameterize(SQLiteCommand cmd, bool usePrimary)
		{
			if (usePrimary) cmd.Parameters.AddWithValue("@xid", this.id);
			cmd.Parameters.AddWithValue("@name", this.name);
			return cmd;
		}
		#endregion
		#region template['?']['newTable']

		static public void SetupTable(DataTable table)
		{
			table.Columns.Add("id",typeof(Int64));
			table.Columns.Add("name",typeof(String));
			table.PrimaryKey = new DataColumn[]{ table.Columns["id"] };
		}

		#endregion
		#region template['prime.struct']['struct rowfrom']

		static public Tags FromRowView(DataRowView row)
		{
			var model = new Tags();
			if (row["id"]!=DBNull.Value) model.id = row["id"] as long?;
			if (row["name"]!=DBNull.Value) model.name = row["name"] as string;
			return model;
		}

		#endregion
	}

	// Generated by a tool : 07/27/2014 06:25:37.401 PM
	// ------------------------
	public partial class Books_tags_link
	{
		static public implicit operator Books_tags_link(DataRowView row) { return Books_tags_link.FromRowView(row); }
		// a custom variable
		public string SQLiteDataPath
		{
			get;
			internal set;
		}
		static public string StringForBooks_tags_link(string input, Books_tags_link m)
		{
			return input
				.Replace("{id}", string.Format("{0}",m.id))
				.Replace("{book}", string.Format("{0}",m.book))
				.Replace("{tag}", string.Format("{0}",m.tag));
		}

		static public string StringForBooks_tags_link(string input, DataRowView row)
		{
			return input
				.Replace("{id}", string.Format("{0}",row["id"]))
				.Replace("{book}", string.Format("{0}",row["book"]))
				.Replace("{tag}", string.Format("{0}",row["tag"]));
		}

		#region Queries
		/// <summary> not that we need it or anything </summary>
		internal const string Insert_Books_tags_link = @"INSERT INTO [books_tags_link] (
	[book],
	[tag])
VALUES(
	@book,
	@tag);";
		/// <summary> not that we need it or anything </summary>
		internal const string Update_Books_tags_link = @"UPDATE [books_tags_link] SET 
		[book] = @book,
		[tag] = @tag
WHERE [id] = @xid;";
		/// <summary> not that we need it or anything </summary>
		internal const string Select_Books_tags_link = @"Select * From books_tags_link;";
		#endregion
		#region Properties
		public long? id { get;set; }
		public long? book { get;set; }
		public long? tag { get;set; }
		#endregion
		#region Constructors

		public Books_tags_link(DataRowView row)
		{
			if (row["id"]!=DBNull.Value) this.id = row["id"] as long?;
			if (row["book"]!=DBNull.Value) this.book = row["book"] as long?;
			if (row["tag"]!=DBNull.Value) this.tag = row["tag"] as long?;
		}
		public DataRowView ToRow(DataRowView row)
		{
			if (row["id"]!=DBNull.Value) this.id = row["id"] as long?;
			if (row["book"]!=DBNull.Value) this.book = row["book"] as long?;
			if (row["tag"]!=DBNull.Value) this.tag = row["tag"] as long?;
			return row;
		}

		public Books_tags_link(){}
		/// <summary>
		/// Used for cloning operations.
		/// <para>Particularly for Insert/Update SQL Queries due to the readonly PRIMARY KEY value.</para>
		/// </summary>
		public Books_tags_link(Books_tags_link value)
		{
			this.id = value.id;
			this.book = value.book;
			this.tag = value.tag;
		}
		#region NONONO
		#if NONONO
		
		/// <summary>
		/// Used for cloning operations.
		/// <para>Particularly for Insert/Update SQL Queries due to the readonly PRIMARY KEY value.</para>
		/// </summary>
		public Books_tags_link(Books_tags_link value)
		{
			this.id = value.id;
			this.SetFields(value);
		}
		#endif
		#endregion
		#endregion
		#region Utils

		/// <summary>
		/// Used for cloning operations.
		/// <para>Particularly for Insert/Update SQL Queries due to the readonly PRIMARY KEY value.</para>
		/// </summary>
		public void SetFields(Books_tags_link value)
		{
			this.book = value.book;
			this.tag = value.tag;
		}

		// TODO: add if (usePrimary) to the primary key an insert statement would not use or contain
		// a primary key value (or would contain a null, hence we provide the oppertunity to neglect
		// it here.
		public SQLiteCommand Parameterize(SQLiteCommand cmd, bool usePrimary)
		{
			if (usePrimary) cmd.Parameters.AddWithValue("@xid", this.id);
			cmd.Parameters.AddWithValue("@book", this.book);
			cmd.Parameters.AddWithValue("@tag", this.tag);
			return cmd;
		}
		#endregion
		#region template['?']['newTable']

		static public void SetupTable(DataTable table)
		{
			table.Columns.Add("id",typeof(Int64));
			table.Columns.Add("book",typeof(Int64));
			table.Columns.Add("tag",typeof(Int64));
			table.PrimaryKey = new DataColumn[]{ table.Columns["id"] };
		}

		#endregion
		#region template['prime.struct']['struct rowfrom']

		static public Books_tags_link FromRowView(DataRowView row)
		{
			var model = new Books_tags_link();
			if (row["id"]!=DBNull.Value) model.id = row["id"] as long?;
			if (row["book"]!=DBNull.Value) model.book = row["book"] as long?;
			if (row["tag"]!=DBNull.Value) model.tag = row["tag"] as long?;
			return model;
		}

		#endregion
	}

}